#!/bin/bash

set -euo pipefail

# Enable tmux integration?
declare -ri use_tmux=$(if [ "${TMUX_PANE:-}" ]; then echo 1; else echo 0; fi)

declare -i wait_at_end=0

if (( $# == 0 )); then
	printf >&2 -- 'Test name(s) required'
	exit
fi

function run {(
	set +e
	local test="$1" target="$2"
	printf -- '\n\e[1mRun (%s)\e[0m\n' "${test}"
	"${target}"
	printf >&2 '\n\e[1mDONE\e[0m\n'
)}

function debug {(
	set +e
	local test="$1" target="$2"
	printf -- '\n\e[1mDebug (%s)\e[0m\n' "${test}"
	gdb -tui -q -ex 'run' "${target}"
	printf >&2 '\n\e[1mDONE\e[0m\n'
)}

function memcheck_helper {(
	set +e
	local valtmp="$1"
	local test="$(cat "${valtmp}.test")"

	function cleanup {
		kill "$(cat "${valtmp}.pid1")"
	}
	trap cleanup EXIT
	echo "$BASHPID" > "${valtmp}.pid2"

	printf -- '\n\e[1mMemcheck (%s) [valgrind output]\e[0m\n' "${test}"
	val-color < "${valtmp}.fifo"

	printf >&2 '\n\e[1mDONE\e[0m\n'

	read LINE
)
wait_at_end=0
}

function memcheck {
	local test="$1" target="$2"
	if (( use_tmux )); then
	(
		set +e
		printf -- '\n\e[1mMemcheck (%s) [process output]\e[0m\n' "${test}"

		declare valtmp="$(mktemp -u)"

		function cleanup {
			kill "$(cat "${valtmp}.pid2")"
			rm -f -- "${valtmp}".{fifo,pid1,pid2,test}
		}
		trap cleanup EXIT
		echo "$BASHPID" > "${valtmp}.pid1"

		echo "${test}" > "${valtmp}.test"
		mkfifo "${valtmp}.fifo"

		tmux split-window -dh "'$0' --call memcheck_helper '${valtmp}'"

		valgrind --leak-check=yes --track-origins=yes --log-file="${valtmp}.fifo" "${target}"

		read LINE
	)
	wait_at_end=0
	else
	(
		set +e
		printf -- '\n\e[1mMemcheck (%s) [all output]\e[0m\n' "${test}"
		valgrind --leak-check=yes --track-origins=yes "${target}"
	)
	fi
	printf >&2 '\n\e[1mDONE\e[0m\n'
}

# If in tmux run task asynchronously in new tab, else run synchronously here
function call {
	if (( in_call )); then
		"$@"
		if (( wait_at_end )); then
			read LINE
		fi
	elif (( use_tmux )); then
		tmux new-window -n "$1:$2" "exec '$0' --call $(printf -- " '%s'" "$@")"
	else
		"$@"
	fi
}

# Is this instance just a proxy to run a task in a new tmux pane?
declare in_call=0
if [ "$1" == "--call" ]; then
	shift
	wait_at_end=1
	in_call=1
	call "$@"
	exit
fi

declare action='debug'
declare -i page=0

while (( $# )); do
	declare arg="$1"
	shift
	# Action
	case "${arg}" in
	page:) page=1
		continue
		;;
	nopage:) page=0
		continue
		;;
	run:) action='run'
		export mode='release'
		continue
		;;
	rund:) action='run'
		export mode='debug'
		continue
		;;
	debug:) action='debug'
		export mode='debug'
		continue
		;;
	mem:) ;&
	memcheck:) action='memcheck'
		export mode='debug'
		continue
		;;
	memcheck_helper:)
		memcheck_helper "$1"
		exit
		;;
	help:)
		printf -- '\e[1mSyntax:\[0m ./%s ( command: | test-name )+\n' "$(basename "$0")"
		printf -- '\e[1mCommands:\e[0m\n'
		printf "  * %s\n" \
			"run - build with optimization and run" \
			"rund - build without optimization and run" \
			"debug - build without optimization and run with gdb" \
			"mem/memcheck - build without optimization and run with valgrind" \
			"page - pipe build output through pager" \
			"nopage - do not pipe build output through pager"
		continue
		;;
	esac
	# Test
	declare test="${arg}"
	declare target="test/${test}"
	rm -f -- "${target}"
	printf -- '\n\e[1mBuild (%s)\e[0m\n' "${test}"
	export o_number mode
	if make "${target}" | ( if (( page )); then less -R; else cat; fi ) && [ -e "${target}" ]; then
		printf -- '\n\e[36mOutput size: %sk\e[0m\n' "$(printf -- '%s/1024\n' "$(stat -c %s "${target}")" | bc)"
		if ! (
			case "${action}" in
			run)
				call run "${test}" "${target}";;
			debug)
				call debug "${test}" "${target}";;
			memcheck)
				call memcheck "${test}" "${target}";;
			esac
		); then
			printf -- '\n\e[32;1mCommand failed: %s %s\e[0m\n' "${action}" "${test}"
		fi
	else
		printf -- '\n\e[31;1mBuild failed (%s) - aborting\e[0m\n' "${test}"
		break
	fi
done
