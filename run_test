#!/bin/bash

set -euo pipefail

if (( $# == 0 )); then
	printf >&2 -- 'Test name(s) required'
	exit
fi

if [ "$1" == "--here" ]; then
	shift
else
	tmux new-window -n 'Tests' "exec '$0' --here $(printf -- " '%s'" "$@")"
	exit
fi

function run {(
	set +e
	local test="$1" target="$2"
	printf -- '\n\e[1mRun (%s)\e[0m\n' "${test}"
	"${target}"
	printf >&2 '\n\e[1mDONE\e[0m\n'
	sleep 1
)}

function debug {(
	set +e
	local test="$1" target="$2"
	printf -- '\n\e[1mDebug (%s)\e[0m\n' "${test}"
	gdb -tui -q -ex 'run' "${target}"
	printf >&2 '\n\e[1mDONE\e[0m\n'
)}

function memcheck {(
	set +e
	local test="$1" target="$2"
	printf -- '\n\e[1mMemcheck (%s) [process output]\e[0m\n' "${test}"

	function cleanup {
		kill "$(cat "${valtmp}.pid")"
		rm -f -- "${valtmp}".{fifo,pid}
	}
	trap cleanup EXIT

	declare valtmp="$(mktemp -u)"

	mkfifo "${valtmp}.fifo"

	declare mainpid="${BASHPID}"

	tmux split-window -dh "$(cat <<EOF
		set +e

		function cleanup {
			kill "${mainpid}"
		}
		trap cleanup EXIT

		echo "\$BASHPID" > '${valtmp}.pid'

		printf -- '\n\e[1mMemcheck (%s) [valgrind output]\e[0m\n' "${test}"
		val-color < '${valtmp}.fifo'

		printf >&2 '\n\e[1mDONE\e[0m\n'

		read LINE
EOF
	)"

	valgrind --leak-check=yes --track-origins=yes --log-file="${valtmp}.fifo" "${target}"

	printf >&2 '\n\e[1mDONE\e[0m\n'
	read LINE
)}

declare action='debug'
declare -i page=0

while (( $# )); do
	# Action
	case "$1" in
	page:) page=1
		shift
		continue
		;;
	nopage:) page=0
		shift
		continue
		;;
	run:) action='run'
		export cxxextra="-O3 -w -march=native -mtune=native"
		shift
		continue
		;;
	debug:) action='debug'
		export cxxextra="-Og -Wall -g -DDEBUG"
		shift
		continue
		;;
	mem:) ;&
	memcheck:) action='memcheck'
		export cxxextra="-Og -Wall -g -DDEBUG"
		shift
		continue
		;;
	esac
	# Test
	declare test="$1"
	shift
	declare target="test/${test}"
	rm -f -- "${target}"
	printf -- '\n\e[1mBuild (%s)\e[0m\n' "${test}"
	export o_number
	if make "${target}" | ( if (( page )); then less -R; else cat; fi ) && [ -e "${target}" ]; then
		printf -- '\n\e[36mOutput size: %sk\e[0m\n' "$(printf -- '%s/1024\n' "$(stat -c %s "${target}")" | bc)"
		case "${action}" in
		run)
			run "${test}" "${target}";;
		debug)
			debug "${test}" "${target}";;
		memcheck)
			memcheck "${test}" "${target}";;
		esac
	else
		printf -- '\n\e[31;1mBuild failed (%s)\e[0m\n' "${test}"
		break
	fi
done

read LINE
